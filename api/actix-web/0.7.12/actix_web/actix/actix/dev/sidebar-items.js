initSidebarItems({"enum":[["MailboxError","Set of error that can occurred during message delivery process"],["Running",""],["SendError",""]],"mod":[["actors","Helper actors"],["channel",""],["io",""],["msgs","Actix system messages"]],"struct":[["ActorResponse","Helper type for representing different type of message responses"],["Arbiter","Event loop controller"],["Context","Actor execution context"],["ContextFut",""],["ContextParts",""],["Envelope",""],["Mailbox",""],["MessageResult","Helper type that implements `MessageResponse` trait"],["Recipient","`Recipient` type allows to send one specific message to an actor."],["RecipientRequest","`RecipientRequest` is a `Future` which represents asynchronous message sending process."],["Registry","Actors registry"],["Request","`Request` is a `Future` which represents asynchronous message sending process."],["Response","Helper type for representing different type of message responses"],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["System","System is an actor which manages runtime."],["SystemRegistry","System wide actors registry"],["TimerFunc","An `ActorFuture` that runs a function in the actor's context after a specified amount of time."]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorContext","Actor execution context"],["ArbiterService","Trait defines arbiter's service."],["AsyncContextParts",""],["EnvelopeProxy",""],["Message","Message type"],["MessageResponse","Trait which defines message response"],["ResponseChannel","Trait defines message response channel"],["StreamHandler","Stream handler"],["SystemService","Trait defines system's service."],["ToEnvelope","Converter trait, packs message to suitable envelope"]],"type":[["ResponseActFuture","A specialized actor future for async message handler"]]});